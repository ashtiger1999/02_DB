-- 계정명 작성법 수정
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;

-- 계정 생성
CREATE USER JH_SHOP IDENTIFIED BY 1234;
CREATE USER SAMPLE IDENTIFIED BY 1234;
DROP USER SAMPLE;

-- 권한 부여
GRANT CREATE SESSION, CREATE TABLE TO JH_SHOP;
GRANT CREATE SESSION, CREATE TABLE TO SAMPLE;
-- BD저장공간 할당량 수정
ALTER USER JH_SHOP DEFAULT TABLESPACE SYSTEM QUOTA UNLIMITED ON SYSTEM;

-- 카테고리 테이블 객체 생성
CREATE TABLE CATEGORIES(
	CATEGORY_ID NUMBER CONSTRAINT CGS_CGID_PK PRIMARY KEY,
	CATEGORY_NAME VARCHAR2(100) CONSTRAINT CGS_CGN_U UNIQUE	
);

-- 카테고리 테이블 컬럼 주석
COMMENT ON COLUMN CATEGORIES.CATEGORY_ID IS '카테고리 ID';
COMMENT ON COLUMN CATEGORIES.CATEGORY_NAME IS '카테고리 이름';

-- 프로덕트 테이블 객체 생성
CREATE TABLE PRODUCTS(
	PRODUCT_ID NUMBER CONSTRAINT PDS_PDID_PK PRIMARY KEY,
	PRODUCT_NAME VARCHAR2(100) CONSTRAINT PDS_PDN_NN NOT NULL,
	CATEGORY NUMBER CONSTRAINT PDS_CG_FK REFERENCES CATEGORIES(CATEGORY_ID),
	PRICE NUMBER DEFAULT 0,
	STOCK_QUANTITY NUMBER DEFAULT 0
);

-- 프로덕트 테이블 컬럼 주석
COMMENT ON COLUMN PRODUCTS.PRODUCT_ID IS '상품 코드';
COMMENT ON COLUMN PRODUCTS.PRODUCT_NAME IS '상품 이름';
COMMENT ON COLUMN PRODUCTS.CATEGORY IS '카테고리';
COMMENT ON COLUMN PRODUCTS.PRICE IS '가격';
COMMENT ON COLUMN PRODUCTS.STOCK_QUANTITY IS '재고량';

-- 커스터머 테이블 객체 생성
CREATE TABLE CUSTOMERS(
	CUSTOMER_ID NUMBER CONSTRAINT CTS_CTID_PK PRIMARY KEY,
	NAME VARCHAR2(20) CONSTRAINT CTS_NAME_NN NOT NULL,
	GENDER CHAR(3) CONSTRAINT CTS_GEN_CK CHECK (GENDER IN ('남','여')),
	ADDRESS VARCHAR2(100),
	PHONE VARCHAR2(30)
);

-- 커스터머 테이블 컬럼 주석
COMMENT ON COLUMN CUSTOMERS.CUSTOMER_ID IS '고객 ID';
COMMENT ON COLUMN CUSTOMERS.NAME IS '이름';
COMMENT ON COLUMN CUSTOMERS.GENDER IS '성별';
COMMENT ON COLUMN CUSTOMERS.ADDRESS IS '주소';
COMMENT ON COLUMN CUSTOMERS.PHONE IS '전화번호';

-- 오더 테이블 객체 생성
CREATE TABLE ORDERS(
	ORDER_ID NUMBER CONSTRAINT ODS_ODID_PK PRIMARY KEY,
	ORDER_DATE DATE DEFAULT SYSDATE,
	STATUS CHAR(1) DEFAULT 'N' CONSTRAINT ODS_STT_CK CHECK ( STATUS IN('Y','N')),
	CUSTOMER_ID NUMBER CONSTRAINT ODS_CTID_FK REFERENCES CUSTOMERS(CUSTOMER_ID) ON DELETE CASCADE
);

-- 오더 테이블 컬럼 주석
COMMENT ON COLUMN ORDERS.ORDER_ID IS '주문 번호';
COMMENT ON COLUMN ORDERS.ORDER_DATE IS '주문일';
COMMENT ON COLUMN ORDERS.STATUS IS '처리상태';
COMMENT ON COLUMN ORDERS.CUSTOMER_ID IS '고객 ID';

-- 오더 디테일 테이블 객체 생성
CREATE TABLE ORDER_DETAILS(
	ORDER_DETAIL_ID NUMBER CONSTRAINT ODTS_ODTSID_PK PRIMARY KEY,
	ORDER_ID NUMBER CONSTRAINT ODTS_ODID_FK REFERENCES ORDERS(ORDER_ID) ON DELETE CASCADE,
	PRODUCT_ID NUMBER CONSTRAINT ODTS_PDID_FK REFERENCES PRODUCTS(PRODUCT_ID) ON DELETE SET NULL,
	QUANTITY NUMBER,
	PRICE_PER_UNIT NUMBER
);

-- 오더 디테일 테이블 컬럼 주석
COMMENT ON COLUMN ORDER_DETAILS.ORDER_DETAIL_ID IS '주문 상세 ID';
COMMENT ON COLUMN ORDER_DETAILS.ORDER_ID IS '주문 번호';
COMMENT ON COLUMN ORDER_DETAILS.PRODUCT_ID IS '상품 코드';
COMMENT ON COLUMN ORDER_DETAILS.QUANTITY IS '수량';
COMMENT ON COLUMN ORDER_DETAILS.PRICE_PER_UNIT IS '가격';

-- 카테고리 샘플데이터 삽입
INSERT INTO CATEGORIES VALUES(1,'스마트폰');
INSERT INTO CATEGORIES VALUES(2,'TV');
INSERT INTO CATEGORIES VALUES(3,'Gaming');

-- 프로덕트 샘플데이터 삽입
INSERT INTO PRODUCTS VALUES(101,'Apple iPhone 12',1,1500000,30);
INSERT INTO PRODUCTS VALUES(102,'Samsung Galaxy S24',1,1800000,50);
INSERT INTO PRODUCTS VALUES(201,'LG OLED TV',2,3600000,20);
INSERT INTO PRODUCTS VALUES(301,'Sony PlayStation 5',3,700000,15);

-- 커스터머 샘플데이터 삽입
INSERT INTO CUSTOMERS VALUES(1,'홍길동','남','서울시 성동구 왕십리','010-1111-2222');
INSERT INTO CUSTOMERS VALUES(2,'유관순','여','서울시 종로구 안국동','010-3333-1111');

-- 오더 샘플데이터 삽입
INSERT INTO ORDERS VALUES(576,'2024-02-29','N',1);
INSERT INTO ORDERS VALUES(978,'2024-03-11','Y',2);
INSERT INTO ORDERS VALUES(777,'2024-03-11','N',2);
INSERT INTO ORDERS VALUES(134,'2022-12-25','Y',1);
INSERT INTO ORDERS VALUES(499,'2020-01-03','Y',1);

-- 오더 디테일 샘플데이터 삽입
INSERT INTO ORDER_DETAILS VALUES(111,576,101,1,1500000);
INSERT INTO ORDER_DETAILS VALUES(222,978,201,2,3600000);
INSERT INTO ORDER_DETAILS VALUES(333,978,102,1,1800000);
INSERT INTO ORDER_DETAILS VALUES(444,777,301,5,700000);
INSERT INTO ORDER_DETAILS VALUES(555,134,102,1,1800000);
INSERT INTO ORDER_DETAILS VALUES(666,499,201,3,3600000);

-- 1. 
/* 쇼핑몰 관리자가 주문은 받았으나, 아직 처리가 안된 주문을 처리하려고 한다.
 * 현재 주문 내역 중 아직 처리되지 않은 주문을 조회하시오. (고객명, 주문일, 처리상태) */
SELECT NAME 이름, ORDER_DATE 주문일, STATUS 처리상태
FROM CUSTOMERS
JOIN ORDERS USING(CUSTOMER_ID)
WHERE STATUS = 'N';

-- 2.
/* 홍길동 고객이 2024년도에 본인이 주문한 전체 내역을 조회하고자 한다.
 * 주문번호, 주문날짜, 처리상태 조회하시오 😀 */
SELECT ORDER_ID 주문번호, ORDER_DATE 주문날짜, STATUS 처리상태
FROM ORDERS
WHERE CUSTOMER_ID = (SELECT CUSTOMER_ID 
										 FROM CUSTOMERS
										 WHERE NAME = '홍길동')
AND TO_CHAR(ORDER_DATE,'YYYY') LIKE '2024%';

-- 3.
/* 유관순 고객이 지금껏 주문한 상품의 수량 별 금액을 조회하려고 한다.
 * 주문번호, 상품명, 수량, 개별금액, 주문별금액을 조회하시오 😀 */
SELECT ORDER_ID 주문번호, PRODUCT_NAME 상품명, QUANTITY 수량, PRICE_PER_UNIT 개별금액, PRICE*QUANTITY 주문별금액
FROM ORDER_DETAILS
JOIN PRODUCTS USING(PRODUCT_ID)
JOIN ORDERS USING(ORDER_ID)
JOIN CUSTOMERS USING(CUSTOMER_ID)
WHERE NAME = '유관순';

